generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  email           String           @unique
  externalId      String           @unique
  phoneNumber     String
  name            String?
  role            Role             @default(USER)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  featureRequests FeatureRequest[]
  subscriptions   Subscription[]
  usages          Usage[]
}

model Service {
  id            String         @id @default(cuid())
  name          String
  description   String
  imageUrl      String?
  awsModelUrl   String
  price         Decimal
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
  usages        Usage[]
}

model Subscription {
  id        String             @id @default(cuid())
  userId    String
  serviceId String
  status    SubscriptionStatus
  startDate DateTime
  endDate   DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  service   Service            @relation(fields: [serviceId], references: [id])
  user      User               @relation(fields: [userId], references: [id])

  @@index([serviceId], map: "Subscription_serviceId_fkey")
  @@index([userId], map: "Subscription_userId_fkey")
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  serviceId String
  amount    Int
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([serviceId], map: "Usage_serviceId_fkey")
  @@index([userId], map: "Usage_userId_fkey")
}

model FeatureRequest {
  id          String        @id @default(cuid())
  userId      String
  title       String
  description String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])

  @@index([userId], map: "FeatureRequest_userId_fkey")
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  INACTIVE
  CANCELLED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  IMPLEMENTED
}
